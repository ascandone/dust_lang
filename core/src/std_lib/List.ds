pub let range = fn start, end {
  let recur = fn end, acc {
    if start > end {
      acc
    } else {
      recur(end - 1, [end, ..acc])
    }
  };
  recur(end - 1, [])
};

pub let foldl = fn lst, z, f {
  match lst {
    [] => z,
    [hd, ..tl] => foldl(tl, f(z, hd), f),
  }
};

pub let foldr = fn lst, z, f {
  match lst {
    [] => z,
    [hd, ..tl] => f(hd, foldr(tl, z, f)),
  }
};

pub let map = fn lst, f { foldr(lst, [], fn x, acc { [f(x), ..acc] }) };

pub let filter = fn lst, pred {
  foldr(lst, [], fn x, acc {
    if pred(x) {
      [x, ..acc]
    } else {
      acc
    }
  })
}
